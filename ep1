#include <stdio.h>
#include <math.h>

// Função para calcular a soma de uma matriz de números
double calculateSum(double arr[], int n) {
    double sum = 0.0;
    for (int i = 0; i < n; i++) {
        sum += arr[i];
    }
    return sum;
}

// Função para calcular a média de uma matriz de números
double calculateMean(double arr[], int n) {
    double sum = calculateSum(arr, n);
    return sum / n;
}

// Função para calcular o desvio padrão (população) de uma matriz de números
double calculateStandardDeviation(double arr[], int n, double mean) {
    double sumOfSquaredDifferences = 0.0;
    for (int i = 0; i < n; i++) {
        double diff = arr[i] - mean;
        sumOfSquaredDifferences += diff * diff;
    }
    return sqrt(sumOfSquaredDifferences / n);
}

//Função para comparar duas duplas para classificação
int compareDoubles(const void* a, const void* b) {
    double diff = (*(double*)a) - (*(double*)b);
    if (diff < 0) return -1;
    if (diff > 0) return 1;
    return 0;
}

int main() {
    int N;

    // Solicitar o número de valores
    printf("Enter the number of values (N): ");
    scanf("%d", &N);

    if (N <= 0) {
        printf("Invalid input. N should be a positive integer.\n");
        return 1;
    }

    double values[N];

    // Solicitar a série de N números
    printf("Enter %d numbers:\n", N);
    for (int i = 0; i < N; i++) {
        scanf("%lf", &values[i]);
    }

    // Calcule e imprima os valores máximo e mínimo
    double max = values[0];
    double min = values[0];
    for (int i = 1; i < N; i++) {
        if (values[i] > max) {
            max = values[i];
        }
        if (values[i] < min) {
            min = values[i];
        }
    }

    // Calcule e imprima a média
    double mean = calculateMean(values, N);
    
    // Calcule e imprima a mediana
    qsort(values, N, sizeof(double), compareDoubles);
    double median;
    if (N % 2 == 0) {
        median = (values[N/2 - 1] + values[N/2]) / 2.0;
    } else {
        median = values[N/2];
    }

    // Calcule e imprima o desvio padrão (população)
    double stdDev = calculateStandardDeviation(values, N, mean);

    printf("Maximum: %.2lf\n", max);
    printf("Minimum: %.2lf\n", min);
    printf("Mean: %.2lf\n", mean);
    printf("Median: %.2lf\n", median);
    printf("Standard Deviation (population): %.2lf\n", stdDev);

    return 0;
}
